{"version":3,"sources":["file:///D:/Office/mmo_movement/assets/Script/socket/SocketConnection.ts"],"names":["Component","_decorator","Colyseus","ccclass","property","SocketConnection","constructor","instance","start","url","useSSL","hostname","includes","port","client","Client","console","log","connect","room","joinOrCreate","sessionId","onLeave","code","isConnected","state","playerMap","onAdd","player","key","addPlayerToWorld","onChange","changes","onPlayerChange","triggerAll","e","error","send","msg","playerContext"],"mappings":"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","sourcesContent":["\r\nimport { Component, Primitive, TERRAIN_HEIGHT_BASE, _decorator } from 'cc';\r\nimport Colyseus from 'db://colyseus-sdk/colyseus.js';\r\nimport { Player } from '../Player';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('SocketConnection')\r\nexport class SocketConnection extends Component {\r\n\r\n    static instance: SocketConnection;\r\n    playerName: string;\r\n    isConnected: boolean = false;\r\n\r\n    @property hostname = \"localhost\";\r\n    @property port = 2567;\r\n    @property useSSL = false;\r\n\r\n    client!: Colyseus.Client;\r\n    room!: Colyseus.Room;\r\n\r\n    constructor() {\r\n        super();\r\n        SocketConnection.instance = this;\r\n    }\r\n\r\n    start() {\r\n\r\n        // Instantiate Colyseus Client\r\n        // connects into (ws|wss)://hostname[:port]\r\n\r\n        /* let domain = window.location.href.split('/')[2];\r\n        let url = \"ws://\" + domain.split(':')[0] + ':2567'; */\r\n\r\n        let url = `${this.useSSL ? \"wss\" : \"ws\"}://${this.hostname}${([443, 80].includes(this.port) || this.useSSL) ? \"\" : `:${this.port}`}`;\r\n        this.client = new Colyseus.Client(`${this.useSSL ? \"wss\" : \"ws\"}://${this.hostname}${([443, 80].includes(this.port) || this.useSSL) ? \"\" : `:${this.port}`}`);\r\n\r\n        console.log(`Connecting server to ${url}`);\r\n        this.connect();\r\n    }\r\n\r\n\r\n    async connect() {\r\n        try {\r\n            this.room = await this.client.joinOrCreate(\"SumoRoom\");\r\n\r\n            console.log(\"Room joined successfully!\");\r\n            console.log(\"user's sessionId:\", this.room.sessionId);\r\n\r\n            // this.room.onStateChange((state) => {\r\n            //     console.log(\"onStateChange: \", state);\r\n            // });\r\n\r\n            this.room.onLeave((code) => {\r\n                console.log(\"onLeave:\", code);\r\n                this.isConnected = false;\r\n            });\r\n\r\n            /* this.room.state.playerMap.onChange = (player, key) => {\r\n                console.log(player, \"have changes at\", key);\r\n            };\r\n            */\r\n\r\n            this.room.state.playerMap.onAdd = (player, key) => {\r\n                console.log(player, \"has been added at\", key);\r\n\r\n                this.isConnected = true;\r\n\r\n                // add your player entity to the game world!\r\n                this.addPlayerToWorld(player, key);\r\n\r\n                // If you want to track changes on a child object inside a map, this is a common pattern:\r\n                player.onChange = function (changes) {\r\n                    SocketConnection.instance.onPlayerChange(this);\r\n                };\r\n\r\n                // force \"onChange\" to be called immediatelly\r\n                player.triggerAll();\r\n            };\r\n\r\n            \r\n\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    send(msg) {\r\n        this.room.send('action', msg)\r\n    }\r\n\r\n    onPlayerChange(playerContext) {\r\n\r\n    }\r\n\r\n    addPlayerToWorld(player, key) {\r\n    }\r\n}\r\n"]}