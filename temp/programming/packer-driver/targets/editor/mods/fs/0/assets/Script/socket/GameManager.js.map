{"version":3,"sources":["file:///D:/Office/mmo_movement/assets/Script/socket/GameManager.ts"],"names":["_decorator","Prefab","instantiate","Vec3","systemEvent","SystemEvent","KeyCode","Label","Vec2","Config","SocketConnection","ccclass","property","CELL_TIME","GameManager","type","up","down","left","right","ZERO","start","on","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","isReady","setInterval","updatePosition","bind","dataPerSec","sendPlayerUpdate","isConnected","player","playerMap","room","sessionId","send","command","data","x","livePos","y","z","addPlayerToWorld","plyr","playerPrefab","position","set","node","parent","addChild","getComponent","selfplayer","onPlayerChange","playerContext","onPositionUpdate","showFps","lastCalledTime","Date","now","fps","delta","fpsText","string","Math","floor","touchCallBack","vector","angle","pos","activeKey","add3f","speed","fix_update","dt","updateNamePos","_currentState","STATE","BUMP","vec","RigidBody","getLinearVelocity","mag","sqrt","RigidBodyComponent","clearVelocity","setIdleStateAnimation","_vector","lengthSqr","IDLE","setWalkStateAnimation","setPosition","_currentPlayerPosition","playerCamera","WALK","updateCamera","target_position","getPosition","lerp","update","deltaTime","_now_time","event","keyCode","ARROW_LEFT","ARROW_UP","ARROW_RIGHT","ARROW_DOWN"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, Prefab, instantiate, Vec3, EventKeyboard, systemEvent, SystemEvent, KeyCode, log, macro, Label, Vec2 } from 'cc';\r\nimport { Player } from '../Player';\r\nimport { Config } from './Config';\r\nimport { SocketConnection } from './SocketConnection';\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst CELL_TIME = 0.016;\r\n\r\n@ccclass('GameManager')\r\nexport class GameManager extends SocketConnection {\r\n\r\n    @property({ type: Prefab })\r\n    playerPrefab: Prefab = null;\r\n\r\n    @property({ type: Label })\r\n    fpsText: Label = null;\r\n\r\n    lastCalledTime = 0;\r\n    delta = 0;\r\n    fps = 0;\r\n\r\n    frame = 0;\r\n    maxFrame = 8;\r\n\r\n    playerMap: { [key: string]: Player } = {};\r\n\r\n    activeKey = {\r\n        up: 0,\r\n        down: 0,\r\n        left: 0,\r\n        right: 0,\r\n    };\r\n\r\n    selfplayer: Player;\r\n\r\n    isReady = false;\r\n    speed = 2;\r\n\r\n\r\n\r\n    private _currentPlayerPosition: Vec3 = Vec3.ZERO;\r\n    private _vector: Vec3 = Vec3.ZERO;\r\n    private _vectorAngle: Vec3 = Vec3.ZERO;\r\n    private _now_time = 0;\r\n    public _charName: string = \"LOL\";\r\n\r\n    public eatTimeout = null;\r\n    public gameController = null;\r\n\r\n    start() {\r\n        super.start();\r\n\r\n        systemEvent.on(SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        systemEvent.on(SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n        this.isReady = true;\r\n\r\n        // this.schedule(this.updatePosition, 1 / 6, macro.REPEAT_FOREVER);\r\n        setInterval(this.updatePosition.bind(this), 1000 / Config.dataPerSec);\r\n\r\n    }\r\n\r\n    sendPlayerUpdate() {\r\n        if (!this.isConnected)\r\n            return;\r\n\r\n        let player = this.playerMap[this.room.sessionId];\r\n        this.send({\r\n            command: 'PLAYER_POS',\r\n            data: {\r\n                x: player.livePos.x,\r\n                y: player.livePos.y,\r\n                z: player.livePos.z,\r\n            }\r\n        });\r\n    }\r\n\r\n    addPlayerToWorld(player, sessionId) {\r\n\r\n        let plyr = instantiate(this.playerPrefab);\r\n        plyr.position.set(new Vec3(player.x, player.y, player.z));\r\n        this.node.parent.addChild(plyr);\r\n\r\n        this.playerMap[sessionId] = plyr.getComponent('Player') as Player;\r\n        this.playerMap[sessionId].livePos = new Vec3(player.x, player.y, player.z);\r\n\r\n        if (this.room.sessionId == sessionId) {\r\n            this.selfplayer = this.playerMap[sessionId];\r\n        }\r\n    }\r\n\r\n    onPlayerChange(playerContext) {\r\n\r\n        // if (playerContext.sessionId != this.room.sessionId)\r\n        this.playerMap[playerContext.sessionId].onPositionUpdate(playerContext);\r\n    }\r\n\r\n    showFps() {\r\n        if (!this.lastCalledTime) {\r\n            this.lastCalledTime = Date.now();\r\n            this.fps = 0;\r\n            return;\r\n        }\r\n        this.delta = (Date.now() - this.lastCalledTime) / 1000;\r\n        this.lastCalledTime = Date.now();\r\n        this.fps = 1 / this.delta;\r\n\r\n        this.fpsText.string = Math.floor(this.fps) + '';\r\n    }\r\n\r\n    touchCallBack(vector: Vec3, angle: number) {\r\n        // this.selfplayer.touchCallBack(vector, angle);\r\n    }\r\n\r\n    updatePosition() {\r\n\r\n        this.showFps();\r\n\r\n        if (!this.selfplayer || !this.isReady)\r\n            return;\r\n\r\n        let pos = new Vec3();\r\n\r\n        if (this.activeKey.left == 1) {\r\n            // pos = this.selfplayer.node.position.add3f(-this.speed, 0, 0);\r\n            // this.selfplayer.node.position = pos;\r\n            pos = this.selfplayer.livePos.add3f(-this.speed, 0, 0);\r\n            this.selfplayer.livePos = pos;\r\n        }\r\n\r\n        if (this.activeKey.right == 1) {\r\n            // pos = this.selfplayer.node.position.add3f(this.speed, 0, 0);\r\n            // this.selfplayer.node.position = pos;\r\n            pos = this.selfplayer.livePos.add3f(this.speed, 0, 0);\r\n            this.selfplayer.livePos = pos;\r\n        }\r\n\r\n        if (this.activeKey.up == 1) {\r\n            // pos = this.selfplayer.node.position.add3f(0, 0, -this.speed);\r\n            // this.selfplayer.node.position = pos;\r\n            pos = this.selfplayer.livePos.add3f(0, 0, -this.speed);\r\n            this.selfplayer.livePos = pos;\r\n        }\r\n\r\n        if (this.activeKey.down == 1) {\r\n            // pos = this.selfplayer.node.position.add3f(0, 0, this.speed);\r\n            // this.selfplayer.node.position = pos;\r\n            pos = this.selfplayer.livePos.add3f(0, 0, this.speed);\r\n            this.selfplayer.livePos = pos;\r\n        }\r\n\r\n        if (this.activeKey.up || this.activeKey.down || this.activeKey.left || this.activeKey.right) {\r\n            this.sendPlayerUpdate();\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    fix_update(dt: number) {\r\n\r\n        this.updateNamePos();\r\n\r\n        if (this._currentState == STATE.BUMP) {\r\n            let vec = new Vec3();\r\n            this.node.getComponent(RigidBody).getLinearVelocity(vec);\r\n            let mag = Math.sqrt(vec.x * vec.x + vec.z * vec.z);\r\n\r\n            if (mag <= 0.2) {\r\n\r\n                this.getComponent(RigidBodyComponent).clearVelocity();\r\n                this.setIdleStateAnimation();\r\n\r\n            } else\r\n                return;\r\n\r\n        }\r\n\r\n        if (this._vector.lengthSqr() > 0) {\r\n            if (this._currentState == STATE.IDLE) {\r\n                this.setWalkStateAnimation();\r\n            }\r\n\r\n            this.node.setPosition(this.node.position.add3f(this._vector.x * this.speed * dt, 0, -this._vector.y * this.speed * dt));\r\n\r\n            this._currentPlayerPosition = new Vec3(this._vector.x, 0, this._vector.y);\r\n\r\n            this.playerCamera.setPosition(this.playerCamera.position.add3f(this._vector.x * this.speed * dt, 0, 0));\r\n\r\n            // this.updateNamePos();\r\n        }\r\n        else {\r\n            if (this._currentState == STATE.WALK) {\r\n                this.setIdleStateAnimation();\r\n            }\r\n            // this.node.setPosition(this.node.position.add3f(this._currentPlayerPosition.x * this.speed * dt, 0, -this._currentPlayerPosition.z * this.speed * dt));\r\n\r\n        }\r\n\r\n        /* if (this._vectorAngle.lengthSqr() > 0) {\r\n            this.playerCamera.eulerAngles = this.playerCamera.eulerAngles.add3f(0, -this._vectorAngle.x, 0);\r\n        } */\r\n    }\r\n\r\n    updateCamera() {\r\n        let target_position = new Vec2(this.node.getPosition().x, this.node.getPosition().z);\r\n        target_position.lerp(target_position, 0.1);\r\n\r\n        this.playerCamera.setPosition(new Vec3(target_position.x, this.node.getPosition().y, target_position.y));\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n\r\n        if (!this.isReady)\r\n            return;\r\n\r\n        this._now_time += deltaTime;\r\n\r\n        while (this._now_time >= CELL_TIME) {\r\n\r\n            this.fix_update(CELL_TIME);\r\n            this.updateCamera();\r\n\r\n            this._now_time -= CELL_TIME;\r\n        }\r\n    }\r\n\r\n\r\n    onKeyDown(event: EventKeyboard) {\r\n\r\n        switch (event.keyCode) {\r\n\r\n            case KeyCode.ARROW_LEFT:\r\n                this.activeKey.left = 1;\r\n                break;\r\n\r\n            case KeyCode.ARROW_UP:\r\n                this.activeKey.up = 1;\r\n                break;\r\n\r\n            case KeyCode.ARROW_RIGHT:\r\n                this.activeKey.right = 1;\r\n                break;\r\n\r\n            case KeyCode.ARROW_DOWN:\r\n                this.activeKey.down = 1;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onKeyUp(event: EventKeyboard) {\r\n        switch (event.keyCode) {\r\n\r\n            case KeyCode.ARROW_LEFT:\r\n                this.activeKey.left = 0;\r\n                break;\r\n\r\n            case KeyCode.ARROW_UP:\r\n                this.activeKey.up = 0;\r\n                break;\r\n\r\n            case KeyCode.ARROW_RIGHT:\r\n                this.activeKey.right = 0;\r\n                break;\r\n\r\n            case KeyCode.ARROW_DOWN:\r\n                this.activeKey.down = 0;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n}"]}