{"version":3,"sources":["file:///Users/shashankchaurasia/CocosWorkspace/3dDemoGame/assets/Script/socket/GameManager.ts"],"names":["_decorator","Prefab","instantiate","Vec3","systemEvent","SystemEvent","KeyCode","log","Label","Config","SocketConnection","ccclass","property","GameManager","type","up","down","left","right","onLoad","window","onGameStart","err","onError","stack","toString","start","on","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","isReady","setInterval","updatePosition","bind","dataPerSec","sendPlayerUpdate","isConnected","player","playerMap","room","sessionId","send","command","data","x","livePos","y","z","event","keyCode","ARROW_LEFT","activeKey","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","selfplayer","clearLoop","addPlayerToWorld","plyr","playerPrefab","position","set","node","parent","addChild","getComponent","onPlayerChange","playerContext","onPositionUpdate","showFps","lastCalledTime","Date","now","fps","delta","fpsText","string","Math","floor","pos","add3f","speed"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, Prefab, instantiate, Vec3, EventKeyboard, systemEvent, SystemEvent, KeyCode, log, macro, Label } from 'cc';\r\nimport { Player } from '../Player';\r\nimport { Config } from './Config';\r\nimport { SocketConnection } from './SocketConnection';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GameManager')\r\nexport class GameManager extends SocketConnection {\r\n\r\n    @property({ type: Prefab })\r\n    playerPrefab: Prefab = null;\r\n\r\n    @property({ type: Label })\r\n    fpsText: Label = null;\r\n\r\n    lastCalledTime = 0;\r\n    delta = 0;\r\n    fps = 0;\r\n\r\n    frame = 0;\r\n    maxFrame = 8;\r\n\r\n    playerMap: { [key: string]: Player } = {};\r\n\r\n    activeKey = {\r\n        up: 0,\r\n        down: 0,\r\n        left: 0,\r\n        right: 0,\r\n    };\r\n\r\n    selfplayer: Player;\r\n\r\n    isReady = false;\r\n    speed = 1;\r\n\r\n    onLoad() {\r\n        // this.addPlayerToWorld({ x: 0, y: 2, z: 0 }, 'abcdefghij');\r\n        // this.schedule(this.showFps, 1 / 120, macro.REPEAT_FOREVER);\r\n        // setInterval(this.showFps.bind(this), 1000 / 60);\r\n\r\n        if (typeof window['gameManager'] !== 'undefined') {\r\n            try {\r\n                window['gameManager'].onGameStart()\r\n            } catch (err) {\r\n                window['gameManager'].onError(err.stack.toString())\r\n            }\r\n        }\r\n    }\r\n\r\n    start() {\r\n        super.start();\r\n\r\n        systemEvent.on(SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        systemEvent.on(SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n        this.isReady = true;\r\n\r\n        // this.schedule(this.updatePosition, 1 / 6, macro.REPEAT_FOREVER);\r\n        setInterval(this.updatePosition.bind(this), 1000 / Config.dataPerSec);\r\n\r\n    }\r\n\r\n    sendPlayerUpdate() {\r\n        if (!this.isConnected)\r\n            return;\r\n\r\n        let player = this.playerMap[this.room.sessionId];\r\n        /* this.send({\r\n            command: 'PLAYER_POS',\r\n            data: {\r\n                x: player.node.position.x,\r\n                y: player.node.position.y,\r\n                z: player.node.position.z,\r\n            }\r\n        }); */\r\n        this.send({\r\n            command: 'PLAYER_POS',\r\n            data: {\r\n                x: player.livePos.x,\r\n                y: player.livePos.y,\r\n                z: player.livePos.z,\r\n            }\r\n        });\r\n\r\n        /* log({\r\n            x: player.livePos.x,\r\n            y: player.livePos.y,\r\n            z: player.livePos.z,\r\n        }); */\r\n\r\n    }\r\n\r\n    onKeyDown(event: EventKeyboard) {\r\n\r\n        switch (event.keyCode) {\r\n\r\n            case KeyCode.ARROW_LEFT:\r\n                this.activeKey.left = 1;\r\n                break;\r\n\r\n            case KeyCode.ARROW_UP:\r\n                this.activeKey.up = 1;\r\n                break;\r\n\r\n            case KeyCode.ARROW_RIGHT:\r\n                this.activeKey.right = 1;\r\n                break;\r\n\r\n            case KeyCode.ARROW_DOWN:\r\n                this.activeKey.down = 1;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        log('key press');\r\n\r\n    }\r\n\r\n    onKeyUp(event: EventKeyboard) {\r\n        switch (event.keyCode) {\r\n\r\n            case KeyCode.ARROW_LEFT:\r\n                this.activeKey.left = 0;\r\n                break;\r\n\r\n            case KeyCode.ARROW_UP:\r\n                this.activeKey.up = 0;\r\n                break;\r\n\r\n            case KeyCode.ARROW_RIGHT:\r\n                this.activeKey.right = 0;\r\n                break;\r\n\r\n            case KeyCode.ARROW_DOWN:\r\n                this.activeKey.down = 0;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        this.selfplayer.clearLoop();\r\n    }\r\n\r\n    addPlayerToWorld(player, sessionId) {\r\n\r\n        let plyr = instantiate(this.playerPrefab);\r\n        plyr.position.set(new Vec3(player.x, player.y, player.z));\r\n        this.node.parent.addChild(plyr);\r\n\r\n        this.playerMap[sessionId] = plyr.getComponent('Player') as Player;\r\n        this.playerMap[sessionId].livePos = new Vec3(player.x, player.y, player.z);\r\n\r\n        if (this.room.sessionId == sessionId) {\r\n            this.selfplayer = this.playerMap[sessionId];\r\n        }\r\n    }\r\n\r\n    onPlayerChange(playerContext) {\r\n\r\n        // if (playerContext.sessionId != this.room.sessionId)\r\n        this.playerMap[playerContext.sessionId].onPositionUpdate(playerContext);\r\n    }\r\n\r\n    showFps() {\r\n        if (!this.lastCalledTime) {\r\n            this.lastCalledTime = Date.now();\r\n            this.fps = 0;\r\n            return;\r\n        }\r\n        this.delta = (Date.now() - this.lastCalledTime) / 1000;\r\n        this.lastCalledTime = Date.now();\r\n        this.fps = 1 / this.delta;\r\n\r\n        this.fpsText.string = Math.floor(this.fps) + '';\r\n    }\r\n\r\n    updatePosition() {\r\n\r\n        this.showFps();\r\n\r\n        if (!this.selfplayer || !this.isReady)\r\n            return;\r\n\r\n        let pos = new Vec3();\r\n\r\n        if (this.activeKey.left == 1) {\r\n            // pos = this.selfplayer.node.position.add3f(-this.speed, 0, 0);\r\n            // this.selfplayer.node.position = pos;\r\n            pos = this.selfplayer.livePos.add3f(-this.speed, 0, 0);\r\n            this.selfplayer.livePos = pos;\r\n        }\r\n\r\n        if (this.activeKey.right == 1) {\r\n            // pos = this.selfplayer.node.position.add3f(this.speed, 0, 0);\r\n            // this.selfplayer.node.position = pos;\r\n            pos = this.selfplayer.livePos.add3f(this.speed, 0, 0);\r\n            this.selfplayer.livePos = pos;\r\n        }\r\n\r\n        if (this.activeKey.up == 1) {\r\n            // pos = this.selfplayer.node.position.add3f(0, 0, -this.speed);\r\n            // this.selfplayer.node.position = pos;\r\n            pos = this.selfplayer.livePos.add3f(0, 0, -this.speed);\r\n            this.selfplayer.livePos = pos;\r\n        }\r\n\r\n        if (this.activeKey.down == 1) {\r\n            // pos = this.selfplayer.node.position.add3f(0, 0, this.speed);\r\n            // this.selfplayer.node.position = pos;\r\n            pos = this.selfplayer.livePos.add3f(0, 0, this.speed);\r\n            this.selfplayer.livePos = pos;\r\n        }\r\n\r\n        if (this.activeKey.up || this.activeKey.down || this.activeKey.left || this.activeKey.right) {\r\n            this.sendPlayerUpdate();\r\n        }\r\n\r\n    }\r\n\r\n}"]}