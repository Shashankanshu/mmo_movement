{"version":3,"sources":["file:///D:/Office/mmo_movement/assets/Script/Player.ts"],"names":["_decorator","Component","Vec3","Vec2","Config","ccclass","property","Player","moveTimeByFrame","start","startPos","node","position","x","y","z","endPos","setInterval","updatePosition","bind","gameFps","onPositionUpdate","plyr","positonQueue","push","dt","queueFrameCount","maxQueueFrames","length","livePos","diffX","shift","moveTimeFrameCount","moveTimeFrames","lerp","updatePositionNew","updateCamera","target_position","getPosition","updateNamePos"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, Component, Node, Vec3, log, macro, Label, CCObject, Vec2 } from 'cc';\r\nimport { Config } from './socket/Config';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Player')\r\nexport class Player extends Component {\r\n\r\n    livePos: Vec3 = new Vec3(0, 0);\r\n\r\n    positonQueue: Vec3[] = [];\r\n    startPos: Vec3;\r\n    endPos: Vec3;\r\n\r\n    // To fetch coordinate from pool\r\n    queueFrameCount = 0;\r\n    maxQueueFrames = 15; //Config.gameFps / Config.dataPerSec;\r\n\r\n    // To move the character\r\n    moveTimeFrameCount = 0;\r\n    moveTimeFrames = Config.moveTimeByFrame;\r\n\r\n    start() {\r\n        this.startPos = new Vec3(this.node.position.x, this.node.position.y, this.node.position.z);\r\n        this.endPos = new Vec3(this.node.position.x, this.node.position.y, this.node.position.z);\r\n\r\n        // setInterval(this.updatePositionNew.bind(this), 1000 / Config.gameFps);\r\n        setInterval(this.updatePosition.bind(this), 1000 / Config.gameFps);\r\n    }\r\n\r\n    onPositionUpdate(plyr) {\r\n        // data from server\r\n        this.positonQueue.push(new Vec3(plyr.x, plyr.y, plyr.z));\r\n    }\r\n\r\n    updatePosition(dt) {\r\n\r\n        // RTT Code\r\n\r\n        // 60 / 10 =  6\r\n\r\n        if (this.queueFrameCount > this.maxQueueFrames) {\r\n\r\n            if (this.positonQueue.length == 0) {\r\n\r\n                if (this.node.position.x != this.livePos.x &&\r\n                    this.node.position.y != this.livePos.y &&\r\n                    this.node.position.z != this.livePos.z) {\r\n\r\n                    this.livePos = new Vec3(this.node.position.x, this.node.position.y, this.node.position.z);\r\n                }\r\n                return;\r\n            }\r\n\r\n            this.startPos = new Vec3(this.node.position.x, this.node.position.y, this.node.position.z);\r\n\r\n            let diffX = this.endPos.x - this.startPos.x;\r\n\r\n            this.endPos = this.positonQueue.shift();\r\n\r\n            this.endPos.x -= diffX;  //  16\r\n\r\n            this.queueFrameCount = 0;\r\n            this.moveTimeFrameCount = 1;\r\n        }\r\n        ++this.queueFrameCount;\r\n\r\n        /// Movement Code\r\n        // 1---20\r\n        if (this.moveTimeFrameCount < this.moveTimeFrames + 1) {\r\n            // let pos = Vec3.lerp(new Vec3(), this.startPos, this.endPos, this.moveTimeFrameCount / this.moveTimeFrames);\r\n            // log(pos.x);\r\n            this.node.position = Vec3.lerp(new Vec3(), this.startPos, this.endPos, this.moveTimeFrameCount / this.moveTimeFrames);\r\n        }\r\n        ++this.moveTimeFrameCount;\r\n\r\n\r\n    }\r\n\r\n\r\n    updatePositionNew(dt) {\r\n\r\n        if (this.queueFrameCount > this.maxQueueFrames) {\r\n\r\n            if (this.positonQueue.length == 0) {\r\n                return;\r\n            }\r\n\r\n            this.startPos = this.endPos;\r\n            this.endPos = this.positonQueue.shift();\r\n\r\n            this.queueFrameCount = 0;\r\n            this.moveTimeFrameCount = 1;\r\n        }\r\n\r\n        this.node.position = Vec3.lerp(new Vec3(), this.startPos, this.endPos, this.queueFrameCount / this.maxQueueFrames);\r\n        ++this.queueFrameCount;\r\n\r\n    }\r\n\r\n    updateCamera() {\r\n        let target_position = new Vec2(this.node.getPosition().x, this.node.getPosition().z);\r\n        target_position.lerp(target_position, 0.1);\r\n        // this.playerCamera.setPosition(new Vec3(target_position.x, this.node.getPosition().y, target_position.y));\r\n    }\r\n\r\n    updateNamePos(){\r\n\r\n    }\r\n}"]}