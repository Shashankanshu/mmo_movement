{"version":3,"sources":["file:///Users/shashankchaurasia/CocosWorkspace/3dDemoGame/assets/Script/socket/SocketConnection.ts"],"names":["Component","_decorator","Colyseus","ccclass","property","SocketConnection","instance","start","url","useSSL","hostname","includes","port","client","Client","console","log","connect","joinOrCreate","room","sessionId","onLeave","code","isConnected","state","playerMap","onAdd","player","key","addPlayerToWorld","onChange","changes","onPlayerChange","triggerAll","error","send","msg","playerContext"],"mappings":"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","sourcesContent":["\nimport { Component, Primitive, TERRAIN_HEIGHT_BASE, _decorator } from 'cc';\nimport Colyseus from 'db://colyseus-sdk/colyseus.js';\nimport { Player } from '../Player';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('SocketConnection')\nexport class SocketConnection extends Component {\n\n    static instance: SocketConnection;\n    playerName: string;\n    isConnected: boolean = false;\n\n    @property hostname = \"localhost\";\n    @property port = 2567;\n    @property useSSL = false;\n\n    client!: Colyseus.Client;\n    room!: Colyseus.Room;\n\n    constructor() {\n        super();\n        SocketConnection.instance = this;\n    }\n\n    start() {\n\n        // Instantiate Colyseus Client\n        // connects into (ws|wss)://hostname[:port]\n\n        /* let domain = window.location.href.split('/')[2];\n        let url = \"ws://\" + domain.split(':')[0] + ':2567'; */\n\n        let url = `${this.useSSL ? \"wss\" : \"ws\"}://${this.hostname}${([443, 80].includes(this.port) || this.useSSL) ? \"\" : `:${this.port}`}`;\n        this.client = new Colyseus.Client(`${this.useSSL ? \"wss\" : \"ws\"}://${this.hostname}${([443, 80].includes(this.port) || this.useSSL) ? \"\" : `:${this.port}`}`);\n\n        console.log(`Connecting server to ${url}`);\n        this.connect();\n    }\n\n\n    async connect() {\n        try {\n            this.room = await this.client.joinOrCreate(\"SumoRoom\");\n\n            console.log(\"Room joined successfully!\");\n            console.log(\"user's sessionId:\", this.room.sessionId);\n\n            // this.room.onStateChange((state) => {\n            //     console.log(\"onStateChange: \", state);\n            // });\n\n            this.room.onLeave((code) => {\n                console.log(\"onLeave:\", code);\n                this.isConnected = false;\n            });\n\n            /* this.room.state.playerMap.onChange = (player, key) => {\n                console.log(player, \"have changes at\", key);\n            };\n            */\n\n            this.room.state.playerMap.onAdd = (player, key) => {\n                console.log(player, \"has been added at\", key);\n\n                this.isConnected = true;\n\n                // add your player entity to the game world!\n                this.addPlayerToWorld(player, key);\n\n                // If you want to track changes on a child object inside a map, this is a common pattern:\n                player.onChange = function (changes) {\n                    SocketConnection.instance.onPlayerChange(this);\n                };\n\n                // force \"onChange\" to be called immediatelly\n                player.triggerAll();\n            };\n\n            \n\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    send(msg) {\n        this.room.send('action', msg)\n    }\n\n    onPlayerChange(playerContext) {\n\n    }\n\n    addPlayerToWorld(player, key) {\n    }\n}\n"]}